apply plugin: 'com.android.application'
def globalConfiguration = rootProject.extensions.getByName("ext")
def Properties props = new Properties()
props.load(new FileInputStream(file("signing.properties")))

static def buildTime() {
    return new Date().format("yyyyMMddhhmm")
}

android {
    compileSdkVersion globalConfiguration.getAt("ANDROID_COMPILE_SDK_VERSION") as int
    buildToolsVersion globalConfiguration.getAt("ANDROID_BUILD_TOOLS_VERSION")

    defaultConfig {
        applicationId "com.jiayang.arouter"
        minSdkVersion globalConfiguration.getAt("ANDROID_BUILD_MIN_SDK_VERSION") as int
        targetSdkVersion globalConfiguration.getAt("ANDROID_TARGET_SDK_VERSION") as int
        versionCode globalConfiguration.getAt("VERSION_CODE") as int
        versionName globalConfiguration.getAt("VERSION_NAME")
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file(props['KEYSTORE_FILE'])
            storePassword props['KEYSTORE_PASSWORD']
            keyAlias props['KEY_ALIAS']
            keyPassword props['KEY_PASSWORD']
        }
        debug {
            storeFile file(props['KEYSTORE_FILE'])
            storePassword props['KEYSTORE_PASSWORD']
            keyAlias props['KEY_ALIAS']
            keyPassword props['KEY_PASSWORD']
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //打包时间
            applicationVariants.all { variant ->    //批量修改Apk名字
                variant.outputs.all { output ->
                    if (!variant.buildType.isDebuggable()) {
                        //获取签名的名字
                        variant.signingConfig.name
                        //要被替换的源字符串
                        def sourceFile = "-${variant.flavorName}-${variant.buildType.name}"
                        //替换的字符串
                        def replaceFile = "_V${variant.versionName}_${variant.flavorName}_${variant.buildType.name}_${buildTime()}"
                        outputFileName = output.outputFile.name.replace("app-release.apk", "arouter_${variant.versionName}_${buildTime()}_r.apk");
                        //遗留问题：如何获取当前module的name，如CodeBooke这个名字怎么获取到
                    }
                }
            }
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])


    if (isModule.toBoolean()) {
        implementation project(':lib_common')
    } else {
        implementation project(':module_app_one')
        implementation project(':module_app_two')
    }
}
